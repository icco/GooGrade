<!-- =================================================================== -->
<!--     Daily Build script                                              -->
<!-- =================================================================== -->
<project name="Your Project Name" default="publish" basedir=".">
	<target name="init">
		<!-- Define properties for maintainability -->
		<property name="app" value="MyFileWithMain (no .class and no .java)" />
		<property name="bin" value="ExecutableName" />
		<property name="pkg" value="./" />
		<property name="svnpath" value="../../../../svn" />
		<property name="sourceDir" value="${svnpath}/trunk/src" />
		<property name="buildDir" value="built" />
		<property name="distDir"  location="dist"/>
		<property name="testDir"  location="${svnpath}/trunk/test"/>
		<property name="webDir" value="../daily" />
		<property name="classpath" value="." />
		<property name="dailyresults" value="dailyresults.html" />
		<!-- Create the time stamp -->
		<tstamp>
			<format property="timestamp" pattern="MM/dd/yyyy hh:mm aa" />
		</tstamp>
		<!-- Create the build output log file -->
		<property name="build.log.dir" location="${webDir}"/>
		<mkdir dir="${build.log.dir}"/>
		<property name="build.log.filename" value="build_${DSTAMP}_${TSTAMP}.log"/>
		<record name="${build.log.dir}/${build.log.filename}"
				  loglevel="verbose" append="false"/>
		<echo message="Build logged to ${build.log.filename}"/>
		<!-- Declare the checkstyle task -->
		<taskdef resource="checkstyletask.properties">
		<classpath>
			<pathelement location="${svnpath}/trunk/build/checkstyle-all-4.4.jar"/>
			<pathelement location="${svnpath}/trunk/build/308checks.jar"/>
		</classpath>
		</taskdef>
	</target>

	<!-- =================================================================== -->
	<!-- Remove old build directories                                        -->
	<!-- =================================================================== -->
	<target name="clean" depends="init">
		<echo>Removing build and dist directories</echo>
		<delete dir="${buildDir}"  failonerror="false"/>
		<delete dir="${distDir}"  failonerror="false"/>
	</target>

	<!-- =================================================================== -->
	<!-- Obtain current sources from svn repository                          -->
	<!-- =================================================================== -->
	<target name="update" depends="clean">
		<echo>Updating source files from repository</echo>
		<exec executable="svn">
			<arg value="update"/>
			<arg value="${svnpath}"/>
		</exec>
	</target>

	<!-- =================================================================== -->
	<!-- Create a property for the current svn revision                      -->
	<!-- =================================================================== -->
	<target name="revision" depends="update,init">
		<exec outputproperty="build.current.revision"
			executable="svnversion">
			<arg line="-n" />
			<arg line="${svnpath}" />
		</exec>
	</target>
	
	<!-- =================================================================== -->
	<!-- Compile the source code                                             -->
	<!-- =================================================================== -->
	<target name="compile" depends="update,revision">
		<echo>Compiling all application source and junit test files</echo>
		<!-- Put the revision number into the source code -->
<!-- 	<replace file="${sourceDir}/${pkg}/${app}.java"
				 value="${build.current.revision}">
		 <replacetoken>RevisionNumber</replacetoken>
	</replace> -->
	
	<!-- Create the needed build directories -->
	<mkdir dir="${buildDir}"/>
	<mkdir dir="${buildDir}/classes"/>
	<mkdir dir="${distDir}"/>

	<!-- Compile sources  -->
	<javac srcdir="${sourceDir}" destdir="${buildDir}/classes/"
		 includes="*.java"
		 fork="true"
		 target="1.5"
		 listfiles="yes"
		 classpath="${sourceDir}"
		 deprecation="yes"
		 failonerror="false" />
	<javac srcdir="${testDir}" destdir="${buildDir}/classes/"
		 includes="${pkg}/*"
		 classpath="${buildDir}/classes "
		 fork="true"
		 target="1.5"
		 deprecation="yes"
		 failonerror="false" />
	</target>

	<!-- =================================================================== -->
	<!-- Check for coding style conformance.                                 -->
	<!-- =================================================================== -->
	<target name="style" depends="compile">
		<checkstyle config="${svnpath}/trunk/build/308style.xml" 
				failOnViolation="false">
			<fileset dir="${sourceDir}/${pkg}" includes="**/*.java"/>
		</checkstyle>
	</target>

	<!-- =================================================================== -->
	<!-- Copy media files needed for the JAR                                 -->
	<!-- =================================================================== -->
	<target name="copyresources" depends="update,compile">
		<copy todir="${buildDir}/classes/${pkg}/resources">
		<fileset dir="${sourceDir}/${pkg}/resources/">
			<include name="*"/>
		</fileset>
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Check for a successful compile                                      -->
	<!-- =================================================================== -->
	<target name="compile.check" depends="compile">
		<condition property="compileok">
			<available file="${buildDir}/classes/${pkg}/${app}.class"/>
		</condition>
	</target>

	<!-- =================================================================== -->
	<!-- Make the JAR file                                                   -->
	<!-- =================================================================== -->
	<target name="jar" depends="compile.check,init,revision,copyresources"
		 if="compileok">
	 <jar destfile="${distDir}/${bin}_r${build.current.revision}.jar" 
		basedir="${buildDir}/classes"
		manifest="${svnpath}/trunk/build/manifest.mf"
	/>
	<!-- Copy the jar to the public web folder -->
	<copy file="${distDir}/${bin}_r${build.current.revision}.jar"
		 todir="${webDir}" />
	<!-- make jar public read -->
	<chmod file="${webDir}/" perm="a+rx"  type="dir"/>
	<chmod file="${webDir}" perm="a+rx"  type="dir"/>
<!--     <chmod dir="${webDir}/" perm="a+r" includes="**/*"/> -->
	<chmod file="${webDir}/${bin}_r${build.current.revision}.jar"
			  perm="a+r" type="file"/>
	</target>

	<!-- =================================================================== -->
	<!-- Make the javadocs                                                   -->
	<!-- =================================================================== -->
	<!-- packagenames="" -->
	<target name="docs" depends="jar,style">
		<javadoc destdir="${distDir}/javadoc"
			sourcepath="${sourceDir}"
			windowtitle="${bin} r${build.current.revision}" 
			sourcefiles="${sourceDir}/Hour.java, ${sourceDir}/Day.java, ${sourceDir}/ScheduleShift.java, ${sourceDir}/ScheduleShiftList.java, ${sourceDir}/Availability.java, ${sourceDir}/Employee.java, ${sourceDir}/EmployeeList.java, ${sourceDir}/LemmingApp.java, ${sourceDir}/Need.java, ${sourceDir}/NeedsList.java, ${sourceDir}/Position.java, ${sourceDir}/PositionList.java, ${sourceDir}/ScheduleDay.java, ${sourceDir}/ScheduleDayList.java, ${sourceDir}/Scheduler.java, ${sourceDir}/TextUI.java, ${sourceDir}/Reports.java, ${sourceDir}/AboutFrame.java, ${sourceDir}/EmployeeFrame.java, ${sourceDir}/HelpFrame.java, ${sourceDir}/ReportFrame.java, ${sourceDir}/BaseUI.java, ${sourceDir}/ShiftFrame.java, ${sourceDir}/SkillFrame.java"
			private="true" nohelp="true"
			nodeprecated="true" nodeprecatedlist="true"
			version="true" author="true" 
			additionalparam='-tag pre:cmf:"Preconditions" -tag post:cmf:"Postconditions"'>
		<!-- overview="${sourceDir}/overview.html" -->
		<!-- there are a lot of relics from when this used packages -->
		<!--  <sourcepath>
		<pathelement location="${sourceDir}" />
		</sourcepath>

		<fileset dir="${sourceDir}" includes="*.java" /> -->
		</javadoc>
		<!-- Copy the docs to the public web folder -->
		<copy todir="${webDir}/javadoc">
			<fileset dir="${distDir}/javadoc"/>
		</copy>
		<!-- make javadocs public read -->
		<chmod file="${webDir}/javadoc/" perm="a+rx" type="dir"/>
		<chmod dir="${webDir}/javadoc/" perm="a+rx" type="both"
			includes="**/*"/>
	</target>

	<!-- =================================================================== -->
	<!-- Publish the build report by appending HTML to the existing page.    -->
	<!-- =================================================================== -->
	<target name="publish.1" depends="docs,init,revision">
		<exec outputproperty="revision.scope"
			executable="sh">
			<arg line="-c &quot;cat .lastVersion&quot;" />
		</exec>
		<echo file="${dailyresults}"
			 append="no">	&lt;tr&gt;
		&lt;td&gt;${timestamp}&lt;/td&gt;
		&lt;td&gt;
			&lt;a href="http://wiki.csc.calpoly.edu/PolyCron/log/?action=follow_coay&amp;amp;rev=${build.current.revision}&amp;amp;stop_rev=${revision.scope}&amp;amp;mode=follow_copy&amp;amp;verbose=on"&gt;
			${build.current.revision}&lt;/a&gt;
		&lt;/td&gt;
		&lt;td&gt;???&lt;/td&gt;
		&lt;td&gt;
			&lt;a href="${build.log.filename}"&gt;Build Output&lt;/a&gt;
		&lt;/td&gt;
		&lt;td&gt;
		</echo> 
	</target>
	<!-- Only include a link to the JAR if the compile succeeded -->
	<target name="publish.2" depends="publish.1,compile.check" 
			if="compileok">
		<echo file="${dailyresults}"
			 append="yes">			&lt;a href="${bin}_r${build.current.revision}.jar"&gt;${bin}_r${build.current.revision}.jar&lt;/a&gt;</echo> 
	</target>
	<target name="publish" depends="publish.2">
		<echo file="${dailyresults}"
			 append="yes">&lt;/td&gt;
	&lt;/tr&gt;
</echo> 
	<!-- make report page and build log public read -->
	<chmod file="${dailyresults}" perm="a+r"/>
	<chmod file="${build.log.dir}/${build.log.filename}"
	perm="a+r" type="file"/>
	</target>
</project>
